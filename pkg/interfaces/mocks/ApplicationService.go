// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	command "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/command"
	coredata "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/coredata"

	http "net/http"

	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v2/pkg/interfaces"

	logger "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/logger"

	mock "github.com/stretchr/testify/mock"

	notifications "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/notifications"

	registry "github.com/edgexfoundry/go-mod-registry/v2/registry"
)

// ApplicationService is an autogenerated mock type for the ApplicationService type
type ApplicationService struct {
	mock.Mock
}

// AddBackgroundPublisher provides a mock function with given fields: capacity
func (_m *ApplicationService) AddBackgroundPublisher(capacity int) interfaces.BackgroundPublisher {
	ret := _m.Called(capacity)

	var r0 interfaces.BackgroundPublisher
	if rf, ok := ret.Get(0).(func(int) interfaces.BackgroundPublisher); ok {
		r0 = rf(capacity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.BackgroundPublisher)
		}
	}

	return r0
}

// AddRoute provides a mock function with given fields: route, handler, methods
func (_m *ApplicationService) AddRoute(route string, handler func(http.ResponseWriter, *http.Request), methods ...string) error {
	_va := make([]interface{}, len(methods))
	for _i := range methods {
		_va[_i] = methods[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, route, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(http.ResponseWriter, *http.Request), ...string) error); ok {
		r0 = rf(route, handler, methods...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationSettings provides a mock function with given fields:
func (_m *ApplicationService) ApplicationSettings() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// CommandClient provides a mock function with given fields:
func (_m *ApplicationService) CommandClient() command.CommandClient {
	ret := _m.Called()

	var r0 command.CommandClient
	if rf, ok := ret.Get(0).(func() command.CommandClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.CommandClient)
		}
	}

	return r0
}

// EventClient provides a mock function with given fields:
func (_m *ApplicationService) EventClient() coredata.EventClient {
	ret := _m.Called()

	var r0 coredata.EventClient
	if rf, ok := ret.Get(0).(func() coredata.EventClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coredata.EventClient)
		}
	}

	return r0
}

// GetAppSettingStrings provides a mock function with given fields: setting
func (_m *ApplicationService) GetAppSettingStrings(setting string) ([]string, error) {
	ret := _m.Called(setting)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecrets provides a mock function with given fields: path, keys
func (_m *ApplicationService) GetSecrets(path string, keys ...string) (map[string]string, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string, ...string) map[string]string); ok {
		r0 = rf(path, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(path, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadConfigurablePipeline provides a mock function with given fields:
func (_m *ApplicationService) LoadConfigurablePipeline() ([]func(interfaces.AppFunctionContext, []interface{}) (bool, interface{}), error) {
	ret := _m.Called()

	var r0 []func(interfaces.AppFunctionContext, []interface{}) (bool, interface{})
	if rf, ok := ret.Get(0).(func() []func(interfaces.AppFunctionContext, []interface{}) (bool, interface{})); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]func(interfaces.AppFunctionContext, []interface{}) (bool, interface{}))
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoggingClient provides a mock function with given fields:
func (_m *ApplicationService) LoggingClient() logger.LoggingClient {
	ret := _m.Called()

	var r0 logger.LoggingClient
	if rf, ok := ret.Get(0).(func() logger.LoggingClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggingClient)
		}
	}

	return r0
}

// MakeItRun provides a mock function with given fields:
func (_m *ApplicationService) MakeItRun() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MakeItStop provides a mock function with given fields:
func (_m *ApplicationService) MakeItStop() {
	_m.Called()
}

// NotificationsClient provides a mock function with given fields:
func (_m *ApplicationService) NotificationsClient() notifications.NotificationsClient {
	ret := _m.Called()

	var r0 notifications.NotificationsClient
	if rf, ok := ret.Get(0).(func() notifications.NotificationsClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notifications.NotificationsClient)
		}
	}

	return r0
}

// RegisterCustomTriggerFactory provides a mock function with given fields: name, factory
func (_m *ApplicationService) RegisterCustomTriggerFactory(name string, factory func(interfaces.TriggerConfig) (interfaces.Trigger, error)) error {
	ret := _m.Called(name, factory)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(interfaces.TriggerConfig) (interfaces.Trigger, error)) error); ok {
		r0 = rf(name, factory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistryClient provides a mock function with given fields:
func (_m *ApplicationService) RegistryClient() registry.Client {
	ret := _m.Called()

	var r0 registry.Client
	if rf, ok := ret.Get(0).(func() registry.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.Client)
		}
	}

	return r0
}

// SetFunctionsPipeline provides a mock function with given fields: transforms
func (_m *ApplicationService) SetFunctionsPipeline(transforms ...func(interfaces.AppFunctionContext, []interface{}) (bool, interface{})) error {
	_va := make([]interface{}, len(transforms))
	for _i := range transforms {
		_va[_i] = transforms[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...func(interfaces.AppFunctionContext, []interface{}) (bool, interface{})) error); ok {
		r0 = rf(transforms...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreSecrets provides a mock function with given fields: path, secrets
func (_m *ApplicationService) StoreSecrets(path string, secrets map[string]string) error {
	ret := _m.Called(path, secrets)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(path, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
