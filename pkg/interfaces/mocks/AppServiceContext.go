// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	bootstrapinterfaces "github.com/edgexfoundry/go-mod-bootstrap/v2/bootstrap/interfaces"
	command "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/command"

	coredata "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/coredata"

	dtos "github.com/edgexfoundry/go-mod-core-contracts/v2/v2/dtos"

	logger "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/logger"

	mock "github.com/stretchr/testify/mock"

	notifications "github.com/edgexfoundry/go-mod-core-contracts/v2/clients/notifications"
)

// AppServiceContext is an autogenerated mock type for the AppServiceContext type
type AppServiceContext struct {
	mock.Mock
}

// CommandClient provides a mock function with given fields:
func (_m *AppServiceContext) CommandClient() command.CommandClient {
	ret := _m.Called()

	var r0 command.CommandClient
	if rf, ok := ret.Get(0).(func() command.CommandClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.CommandClient)
		}
	}

	return r0
}

// CorrelationID provides a mock function with given fields:
func (_m *AppServiceContext) CorrelationID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EventClient provides a mock function with given fields:
func (_m *AppServiceContext) EventClient() coredata.EventClient {
	ret := _m.Called()

	var r0 coredata.EventClient
	if rf, ok := ret.Get(0).(func() coredata.EventClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coredata.EventClient)
		}
	}

	return r0
}

// LoggingClient provides a mock function with given fields:
func (_m *AppServiceContext) LoggingClient() logger.LoggingClient {
	ret := _m.Called()

	var r0 logger.LoggingClient
	if rf, ok := ret.Get(0).(func() logger.LoggingClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggingClient)
		}
	}

	return r0
}

// NotificationsClient provides a mock function with given fields:
func (_m *AppServiceContext) NotificationsClient() notifications.NotificationsClient {
	ret := _m.Called()

	var r0 notifications.NotificationsClient
	if rf, ok := ret.Get(0).(func() notifications.NotificationsClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notifications.NotificationsClient)
		}
	}

	return r0
}

// OutputData provides a mock function with given fields:
func (_m *AppServiceContext) ResponseData() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// PushToCoreData provides a mock function with given fields: deviceName, readingName, value
func (_m *AppServiceContext) PushToCoreData(deviceName string, readingName string, value interface{}) (*dtos.Event, error) {
	ret := _m.Called(deviceName, readingName, value)

	var r0 *dtos.Event
	if rf, ok := ret.Get(0).(func(string, string, interface{}) *dtos.Event); ok {
		r0 = rf(deviceName, readingName, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(deviceName, readingName, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseContentType provides a mock function with given fields:
func (_m *AppServiceContext) ResponseContentType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RetryData provides a mock function with given fields:
func (_m *AppServiceContext) RetryData() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// SecretProvider provides a mock function with given fields:
func (_m *AppServiceContext) SecretProvider() bootstrapinterfaces.SecretProvider {
	ret := _m.Called()

	var r0 bootstrapinterfaces.SecretProvider
	if rf, ok := ret.Get(0).(func() bootstrapinterfaces.SecretProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bootstrapinterfaces.SecretProvider)
		}
	}

	return r0
}

// SetCorrelationID provides a mock function with given fields: id
func (_m *AppServiceContext) SetCorrelationID(id string) {
	_m.Called(id)
}

// SetResponseData provides a mock function with given fields: output
func (_m *AppServiceContext) SetResponseData(output []byte) {
	_m.Called(output)
}

// SetResponseContentType provides a mock function with given fields: _a0
func (_m *AppServiceContext) SetResponseContentType(_a0 string) {
	_m.Called(_a0)
}

// SetRetryData provides a mock function with given fields: payload
func (_m *AppServiceContext) SetRetryData(payload []byte) {
	_m.Called(payload)
}
